#!/bin/bash

#   Copyright 2011 Shaunak Kashyap
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

source /usr/local/libexec/db-migrations/logging.sh

# Configurables
MIG_VERSION_TABLE_NAME=__mig_version__

print_usage() {
    echo -e "Usage:\tapply-postgresql <options>"
    echo 
    echo "Options:"
    echo -e "\t-h <database hostname>"
    echo -e "\t\tSpecify the hostname of the database server. Optional; default = localhost."
    echo
    echo -e "\t-p <database port>"
    echo -e "\t\tSpecify the port for the database server. Optional; default = 5432."
    echo
    echo -e "\t-U <database username>"
    echo -e "\t\tSpecify the username for the database server. Required."
    echo
    echo -e "\t-d <database name>"
    echo -e "\t\tSpecify the name of the database for which to create a migration. Required."
    echo
    echo -e "\t-b <migrations base directory>"
    echo -e "\t\tSpecify the base directory to store migrations files. Optional; default = ."
    echo
    echo -e "\t-l <log level>"
    echo -e "\t\tSpecify the level of logging: DEBUG, INFO, WARNING, FATAL. Optional; default = INFO"
    echo
}

# Set defaults
let LOG_LEVEL=$LOG_LEVEL_INFO
DB_HOST=localhost
DB_PORT=5432
MIG_BASEDIR=.

# Get user input
while getopts ":h:p:U:d:b:l:hn" opt; do
    case $opt in
	h) DB_HOST=$OPTARG;;
	p) DB_PORT=$OPTARG;;
	U) DB_USERNAME=$OPTARG;;
	d) DB_NAME=$OPTARG;;
	b) MIG_BASEDIR=$OPTARG;;
	l) LOG_LEVEL_STR=$OPTARG;;
	h) print_usage; exit 0;;
	:) LOG_FATAL "Option -$OPTARG requires an argument"; print_usage;  exit 1;;
    esac
done 
	    
if [ "$DB_NAME" == "" ]; then
    LOG_FATAL "Database name not specified."
    print_usage
    exit 2
fi

if [ "$DB_USERNAME" == "" ]; then
    LOG_FATAL "Database username not specified."
    print_usage
    exit 3
fi

case $LOG_LEVEL_STR in
    DEBUG)   let LOG_LEVEL=$LOG_LEVEL_DEBUG;;
    INFO)    let LOG_LEVEL=$LOG_LEVEL_INFO;;
    WARNING) let LOG_LEVEL=$LOG_LEVEL_WARNING;;
    FATAL)   let LOG_LEVEL=$LOG_LEVEL_FATAL;;
esac

exec_sql() {
    PGPASSWORD=$DB_PASSWORD psql --quiet --host=$DB_HOST --username=$DB_USERNAME --pset=pager=off --pset=tuples_only --dbname=$DB_NAME --command="$@" 2>/dev/null
}

exec_sql_file() {
    CMD=$(cat "$1")
    CMD="set statement_timeout = 0 ; $CMD ;"
    output=$(PGPASSWORD=$DB_PASSWORD psql --quiet --host=$DB_HOST --username=$DB_USERNAME --pset=pager=off --pset=tuples_only --dbname=$DB_NAME --command "$CMD")
    real_retval=$?
    if [ $real_retval -gt 0 ]; then
	LOG_FATAL "$output"
	return $real_retval
    fi
    retval=$(echo "$output" | grep ERROR | wc -l)
    if [ $retval -gt 0 ]; then
	LOG_FATAL "$output"
	return $retval
    fi
    return 0
}

# First, try to connect
query="\q"
exec_sql "$query"
retval=$?
if [ ! $retval -eq 0 ]; then
    LOG_FATAL "Could not connect to database."
    exit $retval;
fi

# Check if migration version table exists
LOG_DEBUG "Checking if migration version table $MIG_VERSION_TABLE_NAME exists..."
exists=$(exec_sql "\d $MIG_VERSION_TABLE_NAME")
retval=$?

# Create table if it does not exist
if [ $retval -ne 0 ]; then
    LOG_DEBUG "Table does not exist. Creating..."
    query="CREATE TABLE $MIG_VERSION_TABLE_NAME ( version BIGINT NOT NULL PRIMARY KEY )"
    exec_sql "$query"

    retval=$?
    if [ $retval -ne 0 ]; then
    LOG_FATAL "Failed to create migration version table in DB. "
    exit $retval
    fi

fi

# Get current migration version
query="SELECT version FROM $MIG_VERSION_TABLE_NAME"
db_version=$(exec_sql "$query")

if [ "$db_version" == "" ]; then
    let db_version=0
    LOG_DEBUG "Initializing DB version..."
    query="INSERT INTO $MIG_VERSION_TABLE_NAME VALUES($db_version)"
    exec_sql "$query"

    retval=$?
    if [ $retval -ne 0 ]; then
    	LOG_FATAL "Failed to initialize  migration version table in DB. "
    	exit $retval
    fi

fi

# Remove unnecessary padding from DB version
let db_version=$(expr $db_version + 0)
LOG_DEBUG "DB version = $db_version"

# Figure out which migrations need to be applied
dir=$MIG_BASEDIR/$DB_NAME
if [ -d $dir ]; then
    LOG_DEBUG "Looking for migrations in $dir..."
    all_migs=$(find $dir -maxdepth 1 -mindepth 1 -type d -name "[0-9]*" | sort -n)
    applicable_migs=""
    for mig in $all_migs; do
    	mig_version=$(basename $mig)
    	if [ $mig_version -gt $db_version ]; then
    	    applicable_migs="$applicable_migs $mig"
    	fi
    done
    
    # Quit if there are no migrations to apply
    if [ "$applicable_migs" == "" ]; then
    	echo "All migrations already applied. Nothing to do."
    	exit
    fi
    
    # Apply migrations, in order
    error=0
    for mig in $applicable_migs; do

	if [ $error -eq 0 ]; then
	    mig_version=$(basename $mig)
	    up_file="$mig/up"
	    
	    echo "Applying migration version=$mig_version..."
	    
	    if [ -f "$up_file" ]; then

    		if [ -x "$up_file" ]; then
    		    LOG_DEBUG "Applying UP migration (advanced) file $up_file..."
    		    export DB_HOST DB_USERNAME DB_PASSWORD DB_NAME
    		    $up_file
    		    retval=$?
    		    
    		else
    		    LOG_DEBUG "Applying UP migration (basic) file $up_file..."

    		    exec_sql_file $up_file
    		    retval=$?

    		fi # END if - basic or advanced
    	    
    		if [ $retval -eq 0 ]; then
    		    
    		    echo "Successfully applied migration $up_file. Updating version in DB to $mig_version..."
    		    
                        # Update version table in DB
    		    query="UPDATE $MIG_VERSION_TABLE_NAME SET version=$mig_version"
    		    exec_sql "$query"
    		    retval=$?
    		    
    		    if [ $retval -eq 0 ]; then
    			    LOG_DEBUG "Successfully updated DB version to $mig_version."
    		    else
    			    LOG_FATAL "Failed to update DB version to $mig_version."
    			    error=102
    		    fi
    		    
    		else
    		    
    		    LOG_FATAL "Failed to apply migration $up_file."
    		    error=103
    		    
    		fi
		
	    else
		    error=101
	    fi
	fi

    done

    echo "set statement_timeout=0 ; analyze verbose ;" | PGPASSWORD=$DB_PASSWORD psql --quiet --host=$DB_HOST --username=$DB_USERNAME --pset=pager=off --pset=tuples_only --dbname=$DB_NAME 2>/dev/null

else
    echo "No migrations for db = $DB_NAME found. Nothing to do."
fi
